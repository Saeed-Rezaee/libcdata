/*
 * Library to support cross-platform C error functions
 *
 * Copyright (c) 2006-2012, Joachim Metz <joachim.metz@gmail.com>
 *
 * Refer to AUTHORS for acknowledgements.
 *
 * This software is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this software.  If not, see <http://www.gnu.org/licenses/>.
 */

#if !defined( _LIBCDATA_H )
#define _LIBCDATA_H

#include <libcdata/definitions.h>
#include <libcdata/error.h>
#include <libcdata/extern.h>
#include <libcdata/features.h>
#include <libcdata/types.h>

#if defined( __cplusplus )
extern "C" {
#endif

/* -------------------------------------------------------------------------
 * Support functions
 * ------------------------------------------------------------------------- */

/* Returns the library version as a string
 */
LIBCDATA_EXTERN \
const char *libcdata_get_version(
             void );

/* -------------------------------------------------------------------------
 * Stream functions
 * ------------------------------------------------------------------------- */

/* Set the stream
 * Returns 1 if successful or -1 on error
 */
LIBCDATA_EXTERN \
int libcdata_stream_set(
     FILE *stream,
     libcdata_error_t **error );

/* Opens the notification stream using a filename
 * The stream is opened in append mode
 * Returns 1 if successful or -1 on error
 */
LIBCDATA_EXTERN \
int libcdata_stream_open(
     const char *filename,
     libcdata_error_t **error );

/* Closes the notification stream if opened using a filename
 * Returns 0 if successful or -1 on error
 */
LIBCDATA_EXTERN \
int libcdata_stream_close(
     libcdata_error_t **error );

/* -------------------------------------------------------------------------
 * Verbose functions
 * ------------------------------------------------------------------------- */

/* Value to indicate if the verbose notification is active
 */
LIBCDATA_EXTERN \
int libcdata_verbose;

/* Sets the verbose notification
 */
LIBCDATA_EXTERN \
void libcdata_verbose_set(
      int verbose );

/* -------------------------------------------------------------------------
 * Array functions
 * ------------------------------------------------------------------------- */

LIBCDATA_EXTERN \
int libcdata_array_initialize(
     libcdata_array_t **array,
     int number_of_entries,
     libcdata_error_t **error );

LIBCDATA_EXTERN \
int libcdata_array_free(
     libcdata_array_t **array,
     int (*entry_free_function)(
            intptr_t **entry,
            libcdata_error_t **error ),
     libcdata_error_t **error );

LIBCDATA_EXTERN \
int libcdata_array_empty(
     libcdata_array_t *array,
     int (*entry_free_function)(
            intptr_t **entry,
            libcdata_error_t **error ),
     libcdata_error_t **error );

LIBCDATA_EXTERN \
int libcdata_array_clear(
     libcdata_array_t *array,
     int (*entry_free_function)(
            intptr_t **entry,
            libcdata_error_t **error ),
     libcdata_error_t **error );

LIBCDATA_EXTERN \
int libcdata_array_clone(
     libcdata_array_t **destination_array,
     libcdata_array_t *source_array,
     int (*entry_free_function)(
            intptr_t **entry,
            libcdata_error_t **error ),
     int (*entry_clone_function)(
            intptr_t **destination,
            intptr_t *source,
            libcdata_error_t **error ),
     libcdata_error_t **error );

LIBCDATA_EXTERN \
int libcdata_array_resize(
     libcdata_array_t *array,
     int number_of_entries,
     int (*entry_free_function)(
            intptr_t **entry,
            libcdata_error_t **error ),
     libcdata_error_t **error );

LIBCDATA_EXTERN \
int libcdata_array_get_number_of_entries(
     libcdata_array_t *array,
     int *number_of_entries,
     libcdata_error_t **error );

LIBCDATA_EXTERN \
int libcdata_array_get_entry_by_index(
     libcdata_array_t *array,
     int entry_index,
     intptr_t **entry,
     libcdata_error_t **error );

LIBCDATA_EXTERN \
int libcdata_array_set_entry_by_index(
     libcdata_array_t *array,
     int entry_index,
     intptr_t *entry,
     libcdata_error_t **error );

LIBCDATA_EXTERN \
int libcdata_array_append_entry(
     libcdata_array_t *array,
     int *entry_index,
     intptr_t *entry,
     libcdata_error_t **error );

LIBCDATA_EXTERN \
int libcdata_array_insert_entry(
     libcdata_array_t *array,
     int *entry_index,
     intptr_t *entry,
     int (*entry_compare_function)(
            intptr_t *first_entry,
            intptr_t *second_entry,
            libcdata_error_t **error ),
     uint8_t insert_flags,
     libcdata_error_t **error );

#if defined( __cplusplus )
}
#endif

#endif

